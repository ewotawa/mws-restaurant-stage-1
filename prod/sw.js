"use strict";console.log("this is the service worker"),importScripts("https://storage.googleapis.com/workbox-cdn/releases/3.6.1/workbox-sw.js"),workbox?console.log("WorkBox is loaded."):console.log("WorkBox is NOT loaded."),workbox.routing.registerRoute(new RegExp(".*.*"),workbox.strategies.networkFirst());var showNotification=function(){self.registration.showNotification("BackgroundSync success!",{body:"ü¶Ü üêß ü¶Ü üêß"})},queue=new workbox.backgroundSync.Queue("mwsQueue");self.addEventListener("fetch",function(e){var o=fetch(e.request.clone()).catch(function(o){return queue.addRequest(e.request)});e.waitUntil(o)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN3LmpzIl0sIm5hbWVzIjpbImNvbnNvbGUiLCJsb2ciLCJpbXBvcnRTY3JpcHRzIiwic2hvd05vdGlmaWNhdGlvbiIsInNlbGYiLCJyZWdpc3RyYXRpb24iLCJ3b3JrYm94Iiwic3RyYXRlZ2llcyIsIm5ldHdvcmtGaXJzdCIsInByb21pc2VDaGFpbiIsImV2ZW50IiwicXVldWUiLCJhZGRSZXF1ZXN0IiwiYm9keSIsImJhY2tncm91bmRTeW5jIiwiUXVldWUiLCJhZGRFdmVudExpc3RlbmVyIiwiZmV0Y2giLCJyZXF1ZXN0IiwiY2xvbmUiLCJjYXRjaCIsImVyciIsIndhaXRVbnRpbCJdLCJtYXBwaW5ncyI6ImFBQUFBLFFBQUFDLElBQUEsOEJBUUlDLGNBQWMsMkVBR1ZGLFFBQ0dBLFFBQUFDLElBQUEsc0JBRU5ELFFBQUFDLElBQUEsMEJBZ0JTRSxRQUFBQSxRQUFBQSxjQUNGQyxJQUFLQyxPQUFBQSxRQURUQyxRQUFBQyxXQUFBQyxnQkFXUUMsSUFBQUEsaUJBQXFCQyxXQUV2Qk4sS0FBT08sYUFBTUMsaUJBQWIsMEJBQUEsQ0FBQUMsS0FBQSxpQkFKTkYsTUFBQSxJQUFBTCxRQUFBUSxlQUFBQyxNQUFBLFlBWVJYLEtBQUFZLGlCQUFBLFFBQUEsU0FBQU4sR0FWVSxJQUFNRCxFQUFlUSxNQUFNUCxFQUFNUSxRQUFRQyxTQUN4Q0MsTUFBTSxTQUFDQyxHQUNKLE9BQU9WLE1BQU1DLFdBQVdGLEVBQU1RLFdBR2xDUixFQUFNWSxVQUFVYiIsImZpbGUiOiJzdy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vc2VydmljZSB3b3JrZXJcblxuY29uc29sZS5sb2coJ3RoaXMgaXMgdGhlIHNlcnZpY2Ugd29ya2VyJyk7XG5cblxuXG5cbi8vIEltcG9ydCBXb3JrQm94XG4gICAgaW1wb3J0U2NyaXB0cygnaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3dvcmtib3gtY2RuL3JlbGVhc2VzLzMuNi4xL3dvcmtib3gtc3cuanMnKTtcblxuICAgIGlmICh3b3JrYm94KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdXb3JrQm94IGlzIGxvYWRlZC4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygnV29ya0JveCBpcyBOT1QgbG9hZGVkLicpO1xuICAgIH1cblxuXG5cblxuLy8gY2FjaGUgd2l0aCBXb3JrQm94OiBub24taW1hZ2UgYXNzZXRzXG4gICAgd29ya2JveC5yb3V0aW5nLnJlZ2lzdGVyUm91dGUoXG4gICAgICBuZXcgUmVnRXhwKCcuKlxcLionKSxcbiAgICAgIHdvcmtib3guc3RyYXRlZ2llcy5uZXR3b3JrRmlyc3QoKVxuICAgICk7XG5cblxuXG5cbi8vIFdvcmtCb3ggQmFja2dyb3VuZCBTeW5jXG4gICAgLy8gY3JlYXRlIGEgbm90aWZpY2F0aW9uIHRvIHNob3cgdGhhdCB0aGUgcXVldWUgaXMgd29ya2luZy5cbiAgICAgICAgY29uc3Qgc2hvd05vdGlmaWNhdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHNlbGYucmVnaXN0cmF0aW9uLnNob3dOb3RpZmljYXRpb24oJ0JhY2tncm91bmRTeW5jIHN1Y2Nlc3MhJywge2JvZHk6ICfwn6aGIPCfkKcg8J+mhiDwn5CnJ30pO1xuICAgICAgICB9O1xuXG4gICAgLy8gY3JlYXRlIGEgcXVldWUgdGhhdCByZXByZXNlbnRzIGZhaWxlZCBIVFRQIHJlcXVlc3RzLiBcbiAgICAgICAgY29uc3QgcXVldWUgPSBuZXcgd29ya2JveC5iYWNrZ3JvdW5kU3luYy5RdWV1ZSgnbXdzUXVldWUnKTtcblxuXG4gICAgLy8gYWRkIGV2ZW50IGxpc3RlbmVyIGZvciBmZXRjaCByZXF1ZXN0c1xuICAgICAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2ZldGNoJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgLy8gQ2xvbmUgdGhlIHJlcXVlc3QgdG8gZW5zdXJlIGl0J3Mgc2F2ZWQgdG8gcmVhZCB3aGVuIGFkZGluZyB0byB0aGUgUXVldWUuXG4gICAgICAgICAgY29uc3QgcHJvbWlzZUNoYWluID0gZmV0Y2goZXZlbnQucmVxdWVzdC5jbG9uZSgpKVxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBxdWV1ZS5hZGRSZXF1ZXN0KGV2ZW50LnJlcXVlc3QpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZXZlbnQud2FpdFVudGlsKHByb21pc2VDaGFpbik7XG4gICAgICAgIH0pO1xuXG4vLyBDb25zb2xlIGxvZ3MgZm9yIHNlcnZpY2Ugd29ya2VyIGV2ZW50c1xuXG4vKiBbYV1cblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdpbnN0YWxsJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBjb25zb2xlLmxvZygnc2VydmljZSB3b3JrZXIgaW5zdGFsbGluZycpO1xuICAgIC8vcGVyZm9ybSBpbnN0YWxsIHN0ZXBzXG4gICAgZXZlbnQud2FpdFVudGlsKFxuICAgICAgICBjYWNoZXMub3BlbihDQUNIRV9OQU1FKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oY2FjaGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnT3BlbmVkIGNhY2hlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlLmFkZEFsbCh1cmxzVG9DYWNoZSk7XG4gICAgICAgICAgICB9KVxuICAgICk7XG59KTtcblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdhY3RpdmF0ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coJ3NlcnZpY2Ugd29ya2VyIGFjdGl2YXRpbmcnKTtcbn0pO1xuXG5bYV0gKi9cblxuLy8gYWRkIGVsZW1lbnRzIHRvIHRoZSBjYWNoZSB3aGVuIHRoZSBwYWdlJ3MgaGFzaCBjaGFuZ2VzXG4vKiBcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coJ3dpbmRvdyBoYXNoIGhhcyBjaGFuZ2VkLiBBZGQgbmV3IGFzc2V0cyB0byB0aGUgY2FjaGUuJyk7XG4gICAgZXZlbnQud2FpdFVudGlsKFxuICAgICAgICBjYWNoZXMub3BlbihDQUNIRV9OQU1FKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oY2FjaGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnT3BlbmVkIGNhY2hlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlLmFkZChldmVudC5yZXF1ZXN0KTtcbiAgICAgICAgICAgIH0pXG4gICAgKTtcbn0sIGZhbHNlKTtcbiovXG5cbi8qIFtiXVxuXG4vL2hhbmRsZSBmZXRjaCBldmVudHNcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignZmV0Y2gnLCBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIGFkZCBjb25zb2xlIGxvZ2dpbmcgZm9yIGV2ZW50IHJlcXVlc3RzXG4gICAgLy9jb25zb2xlLmxvZyhldmVudC5yZXF1ZXN0KTtcblxuICAgIC8vc2VydmUgc3RhdGljIGNvbnRlbnQgZnJvbSBjYWNoZVxuICAgIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgICAgICBjYWNoZXMubWF0Y2goZXZlbnQucmVxdWVzdClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgLy9DYWNoZSBoaXQgLSByZXR1cm4gcmVzcG9uc2VcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKGV2ZW50LnJlcXVlc3QpOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICk7XG59KTtcblxuW2JdICovIl19
