"use strict";console.log("this is the service worker"),importScripts("https://storage.googleapis.com/workbox-cdn/releases/3.6.1/workbox-sw.js"),workbox?console.log("WorkBox is loaded."):console.log("WorkBox is NOT loaded."),workbox.routing.registerRoute(new RegExp(".*.*"),workbox.strategies.staleWhileRevalidate({cacheName:"mwsCache"}));var showNotification=function(){self.registration.showNotification("BackgroundSync success!",{body:"ü¶Ü üêß ü¶Ü üêß"})},queue=new workbox.backgroundSync.Queue("mwsQueue");self.addEventListener("fetch",function(o){var e=fetch(o.request.clone()).catch(function(e){return queue.addRequest(o.request)});o.waitUntil(e)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN3LmpzIl0sIm5hbWVzIjpbImNvbnNvbGUiLCJsb2ciLCJpbXBvcnRTY3JpcHRzIiwid29ya2JveCIsInJvdXRpbmciLCJyZWdpc3RlclJvdXRlIiwiUmVnRXhwIiwic3RyYXRlZ2llcyIsInN0YWxlV2hpbGVSZXZhbGlkYXRlIiwic2VsZiIsInJlZ2lzdHJhdGlvbiIsInByb21pc2VDaGFpbiIsImV2ZW50IiwicXVldWUiLCJhZGRSZXF1ZXN0IiwiYm9keSIsImJhY2tncm91bmRTeW5jIiwiUXVldWUiLCJhZGRFdmVudExpc3RlbmVyIiwiZmV0Y2giLCJyZXF1ZXN0IiwiY2xvbmUiLCJjYXRjaCIsImVyciIsIndhaXRVbnRpbCJdLCJtYXBwaW5ncyI6ImFBQUFBLFFBQUFDLElBQUEsOEJBUUlDLGNBQWMsMkVBR1ZGLFFBQ0dBLFFBQUFDLElBQUEsc0JBRU5ELFFBQUFDLElBQUEsMEJBTURFLFFBQVFDLFFBQVFDLGNBV3BCLElBQUFDLE9BQUEsUUFDSUgsUUFBQUksV0FBQUMscUJBQUEsQ0FFUUMsVUFBS0MsY0FVREMsSUFBQUEsaUJBQXFCQyxXQUV2QkgsS0FBT0ksYUFBTUMsaUJBQWIsMEJBQUEsQ0FBQUMsS0FBQSxpQkFKTkYsTUFBQSxJQUFBVixRQUFBYSxlQUFBQyxNQUFBLFlBYVJSLEtBQUFTLGlCQUFBLFFBQUEsU0FBQU4sR0FYVSxJQUFNRCxFQUFlUSxNQUFNUCxFQUFNUSxRQUFRQyxTQUN4Q0MsTUFBTSxTQUFDQyxHQUNKLE9BQU9WLE1BQU1DLFdBQVdGLEVBQU1RLFdBR2xDUixFQUFNWSxVQUFVYiIsImZpbGUiOiJzdy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vc2VydmljZSB3b3JrZXJcblxuY29uc29sZS5sb2coJ3RoaXMgaXMgdGhlIHNlcnZpY2Ugd29ya2VyJyk7XG5cblxuXG5cbi8vIEltcG9ydCBXb3JrQm94XG4gICAgaW1wb3J0U2NyaXB0cygnaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3dvcmtib3gtY2RuL3JlbGVhc2VzLzMuNi4xL3dvcmtib3gtc3cuanMnKTtcblxuICAgIGlmICh3b3JrYm94KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdXb3JrQm94IGlzIGxvYWRlZC4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygnV29ya0JveCBpcyBOT1QgbG9hZGVkLicpO1xuICAgIH1cblxuXG5cblxuLy8gY2FjaGUgd2l0aCBXb3JrQm94OiBub24taW1hZ2UgYXNzZXRzXG4gICAgd29ya2JveC5yb3V0aW5nLnJlZ2lzdGVyUm91dGUoXG4gICAgICBuZXcgUmVnRXhwKCcuKlxcLionKSxcbiAgICAgIHdvcmtib3guc3RyYXRlZ2llcy5zdGFsZVdoaWxlUmV2YWxpZGF0ZSh7XG4gICAgICAgIC8vIGN1c3RvbSBjYWNoZSBuYW1lXG4gICAgICAgIGNhY2hlTmFtZTogJ213c0NhY2hlJ1xuICAgICAgfSlcbiAgICApO1xuXG5cblxuXG4vLyBXb3JrQm94IEJhY2tncm91bmQgU3luY1xuICAgIC8vIGNyZWF0ZSBhIG5vdGlmaWNhdGlvbiB0byBzaG93IHRoYXQgdGhlIHF1ZXVlIGlzIHdvcmtpbmcuXG4gICAgICAgIGNvbnN0IHNob3dOb3RpZmljYXRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICBzZWxmLnJlZ2lzdHJhdGlvbi5zaG93Tm90aWZpY2F0aW9uKCdCYWNrZ3JvdW5kU3luYyBzdWNjZXNzIScsIHtib2R5OiAn8J+mhiDwn5CnIPCfpoYg8J+Qpyd9KTtcbiAgICAgICAgfTtcblxuICAgIC8vIGNyZWF0ZSBhIHF1ZXVlIHRoYXQgcmVwcmVzZW50cyBmYWlsZWQgSFRUUCByZXF1ZXN0cy4gXG4gICAgICAgIGNvbnN0IHF1ZXVlID0gbmV3IHdvcmtib3guYmFja2dyb3VuZFN5bmMuUXVldWUoJ213c1F1ZXVlJyk7XG5cblxuICAgIC8vIGFkZCBldmVudCBsaXN0ZW5lciBmb3IgZmV0Y2ggcmVxdWVzdHNcbiAgICAgICAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCdmZXRjaCcsIChldmVudCkgPT4ge1xuICAgICAgICAgIC8vIENsb25lIHRoZSByZXF1ZXN0IHRvIGVuc3VyZSBpdCdzIHNhdmVkIHRvIHJlYWQgd2hlbiBhZGRpbmcgdG8gdGhlIFF1ZXVlLlxuICAgICAgICAgIGNvbnN0IHByb21pc2VDaGFpbiA9IGZldGNoKGV2ZW50LnJlcXVlc3QuY2xvbmUoKSlcbiAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gcXVldWUuYWRkUmVxdWVzdChldmVudC5yZXF1ZXN0KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGV2ZW50LndhaXRVbnRpbChwcm9taXNlQ2hhaW4pO1xuICAgICAgICB9KTtcblxuXG4vLyBDb25zb2xlIGxvZ3MgZm9yIHNlcnZpY2Ugd29ya2VyIGV2ZW50c1xuXG4vKiBbYV1cblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdpbnN0YWxsJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBjb25zb2xlLmxvZygnc2VydmljZSB3b3JrZXIgaW5zdGFsbGluZycpO1xuICAgIC8vcGVyZm9ybSBpbnN0YWxsIHN0ZXBzXG4gICAgZXZlbnQud2FpdFVudGlsKFxuICAgICAgICBjYWNoZXMub3BlbihDQUNIRV9OQU1FKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oY2FjaGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnT3BlbmVkIGNhY2hlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlLmFkZEFsbCh1cmxzVG9DYWNoZSk7XG4gICAgICAgICAgICB9KVxuICAgICk7XG59KTtcblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdhY3RpdmF0ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coJ3NlcnZpY2Ugd29ya2VyIGFjdGl2YXRpbmcnKTtcbn0pO1xuXG5bYV0gKi9cblxuLy8gYWRkIGVsZW1lbnRzIHRvIHRoZSBjYWNoZSB3aGVuIHRoZSBwYWdlJ3MgaGFzaCBjaGFuZ2VzXG4vKiBcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coJ3dpbmRvdyBoYXNoIGhhcyBjaGFuZ2VkLiBBZGQgbmV3IGFzc2V0cyB0byB0aGUgY2FjaGUuJyk7XG4gICAgZXZlbnQud2FpdFVudGlsKFxuICAgICAgICBjYWNoZXMub3BlbihDQUNIRV9OQU1FKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oY2FjaGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnT3BlbmVkIGNhY2hlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlLmFkZChldmVudC5yZXF1ZXN0KTtcbiAgICAgICAgICAgIH0pXG4gICAgKTtcbn0sIGZhbHNlKTtcbiovXG5cbi8qIFtiXVxuXG4vL2hhbmRsZSBmZXRjaCBldmVudHNcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignZmV0Y2gnLCBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIGFkZCBjb25zb2xlIGxvZ2dpbmcgZm9yIGV2ZW50IHJlcXVlc3RzXG4gICAgLy9jb25zb2xlLmxvZyhldmVudC5yZXF1ZXN0KTtcblxuICAgIC8vc2VydmUgc3RhdGljIGNvbnRlbnQgZnJvbSBjYWNoZVxuICAgIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgICAgICBjYWNoZXMubWF0Y2goZXZlbnQucmVxdWVzdClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgLy9DYWNoZSBoaXQgLSByZXR1cm4gcmVzcG9uc2VcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKGV2ZW50LnJlcXVlc3QpOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICk7XG59KTtcblxuW2JdICovIl19
